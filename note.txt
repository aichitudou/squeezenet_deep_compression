python deep_compression.py lenet_deploy.prototxt lenet.caffemodel 0.3 256
python deep_compression.py deploy.prototxt train_iter_70000.caffemodel 0.3 256
../../../caffe/build/tools/caffe train -solver solver.prototxt -weights squeezenet_v1.0.caffemodel -gpu 0


target_layers=['conv1', 'conv2', 'ip1', 'ip2']

conv1: (20,1,5,5 )

sparse_1d.shape: (500,)
nonzero: (350,) -> reshape(-1,1) (350,1)

clusters.labels_:这350个数对应的64个聚类中心的索引值

350
[53 25  2 22 51 62 49 12 32 26 31 10  6 51  1 56 12 17 17 57 54 40 49 31 56
 40  8 50 57 44 14 52 33 59 22 22 50 53 41 37 41 37 49 11 56 21 45 55 54 22
 28 10 37 42  7 34 23 11 27 25 13 10 21 36 24 41 19 61 46 26 30 11  5 53 60
 54 58 29 18 13 48 48 37 43 41 38 12 13 19 43 50  7 14 62 57 43 35 44 46 61
 35 48 51 50 21 36  6 40 20 20 46 10 43 31  5  6  9  9  5 64 35 64 11 45 44
 17  3 43 48 21 13 53 41 27 28 22 26 51  8 43 51 41 22 41 12 10 35 63 37 35
 51 46 21 30  8 13 30 22 64 43  3 27 50  9 50 13 27 39 60 27 15 59 10  1 39
  4  8 52 30 44  9 64  9 20 57 28 19 38 26 29  3 30 32  8 19 26 17  2 20  2
 58 21  9 51 46 36 43  3 12 19 43 47 22 41 35 34  7 42 16 35 39 47  2  3  8
  8  6 30 52 29 22 31 30 19 17 31 35 57 44  7  3 38 51 50  5 54 60 31 31 54
 12 29 62 25  2 33 16 30  7 20 47  4 35 49 58 21 59 38 18 36 21  3 51  6 28
 21 52 32 45  5 57 20 49 33 14  4 42 21 13 11 50  5 30  2  2 63 35 17 14 53
 10 57 14 18 12 64 18 46  6 30 52 22  5 19 41 57 22 60 10 63 22  5 54 60 54
  3  8  6  2  3  6 28 37 44 31 63 54 27 58  9 31 16 36  8 54 16  1 40 28 56]


np.where(sparse_1d != 0)[0]:
[  1   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22
  23  27  28  29  31  33  34  35  37  38  40  43  44  47  48  49  50  51
  55  56  58  61  62  63  65  66  67  68  70  71  72  73  74  75  76  78
  79  81  82  83  84  85  87  88  90  91  92  93  94  95  96  98  99 101
 102 103 104 105 106 108 109 110 113 114 115 116 117 118 119 121 124 125
 126 127 128 129 131 132 133 134 135 136 137 138 139 140 141 142 143 144
 146 151 153 157 158 160 161 164 165 166 171 172 174 175 177 178 179 180
 182 185 186 187 188 189 190 193 194 197 201 202 203 207 208 209 210 211
 213 214 219 221 223 225 226 230 231 232 234 235 236 238 240 242 243 245
 246 247 248 249 251 252 254 255 256 257 258 259 260 261 262 263 264 267
 268 269 270 272 274 275 278 281 283 284 285 286 287 288 289 290 291 293
 295 296 297 298 299 301 302 303 304 306 307 308 309 310 311 313 314 315
 316 317 318 319 321 322 325 326 328 330 336 338 340 341 342 343 344 346
 347 349 350 351 352 353 354 355 356 357 358 359 361 362 363 364 365 366
 367 368 372 373 376 378 380 381 382 383 385 386 387 388 389 390 391 392
 394 395 396 398 399 400 403 404 406 407 408 409 410 411 412 413 414 416
 417 419 421 422 424 425 426 427 428 429 430 431 432 434 435 437 438 440
 441 442 443 445 446 447 448 449 450 451 452 453 454 457 458 459 460 461
 462 464 465 466 468 469 470 471 472 475 476 477 478 482 483 484 486 488
 490 491 493 494 496 497 498 499]

np.diff(absolute_index)
[5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4 1 1 2 2 1 1 2 1 2 3 1 3 1 1 1 1 4 1
 2 3 1 1 2 1 1 1 2 1 1 1 1 1 1 2 1 2 1 1 1 1 2 1 2 1 1 1 1 1 1 2 1 2 1 1 1
 1 1 2 1 1 3 1 1 1 1 1 1 2 3 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 5 2 4
 1 2 1 3 1 1 5 1 2 1 2 1 1 1 2 3 1 1 1 1 1 3 1 3 4 1 1 4 1 1 1 1 2 1 5 2 2
 2 1 4 1 1 2 1 1 2 2 2 1 2 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 3 1 1 1 2 2 1
 3 3 2 1 1 1 1 1 1 1 1 2 2 1 1 1 1 2 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 1 2 1 3
 1 2 2 6 2 2 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 4 1 3 2 2 1
 1 1 2 1 1 1 1 1 1 1 2 1 1 2 1 1 3 1 2 1 1 1 1 1 1 1 1 2 1 2 2 1 2 1 1 1 1
 1 1 1 1 2 1 2 1 2 1 1 1 2 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 2 1 1 2 1 1 1 1 3
 1 1 1 4 1 1 2 2 2 1 2 1 2 1 1 1]

dense = ndarray.tolist()

[53, 25, 2, 22, 51, 62, 49, 12, 32, 26, 31, 10, 6, 51, 1, 56, 12, 17, 17, 57, 54, 40, 49, 31, 56, 40, 8, 50, 57, 44, 14, 52, 33, 59, 22, 22, 50, 53, 41, 37, 41, 37, 49, 11, 56, 21, 45, 55, 54, 22, 28, 10, 37, 42, 7, 34, 23, 11, 27, 25, 13, 10, 21, 36, 24, 41, 19, 61, 46, 26, 30, 11, 5, 53, 60, 54, 58, 29, 18, 13, 48, 48, 37, 43, 41, 38, 12, 13, 19, 43, 50, 7, 14, 62, 57, 43, 35, 44, 46, 61, 35, 48, 51, 50, 21, 36, 6, 40, 20, 20, 46, 10, 43, 31, 5, 6, 9, 9, 5, 64, 35, 64, 11, 45, 44, 17, 3, 43, 48, 21, 13, 53, 41, 27, 28, 22, 26, 51, 8, 43, 51, 41, 22, 41, 12, 10, 35, 63, 37, 35, 51, 46, 21, 30, 8, 13, 30, 22, 64, 43, 3, 27, 50, 9, 50, 13, 27, 39, 60, 27, 15, 59, 10, 1, 39, 4, 8, 52, 30, 44, 9, 64, 9, 20, 57, 28, 19, 38, 26, 29, 3, 30, 32, 8, 19, 26, 17, 2, 20, 2, 58, 21, 9, 51, 46, 36, 43, 3, 12, 19, 43, 47, 22, 41, 35, 34, 7, 42, 16, 35, 39, 47, 2, 3, 8, 8, 6, 30, 52, 29, 22, 31, 30, 19, 17, 31, 35, 57, 44, 7, 3, 38, 51, 50, 5, 54, 60, 31, 31, 54, 12, 29, 62, 25, 2, 33, 16, 30, 7, 20, 47, 4, 35, 49, 58, 21, 59, 38, 18, 36, 21, 3, 51, 6, 28, 21, 52, 32, 45, 5, 57, 20, 49, 33, 14, 4, 42, 21, 13, 11, 50, 5, 30, 2, 2, 63, 35, 17, 14, 53, 10, 57, 14, 18, 12, 64, 18, 46, 6, 30, 52, 22, 5, 19, 41, 57, 22, 60, 10, 63, 22, 5, 54, 60, 54, 3, 8, 6, 2, 3, 6, 28, 37, 44, 31, 63, 54, 27, 58, 9, 31, 16, 36, 8, 54, 16, 1, 40, 28, 56]



conv1 (64, 3, 3, 3)
fire2/squeeze1x1 (16, 96, 1, 1)
fire2/expand1x1 (64, 16, 1, 1)
fire2/expand3x3 (64, 16, 3, 3)
fire3/squeeze1x1 (16, 128, 1, 1)
fire3/expand1x1 (64, 16, 1, 1)
fire3/expand3x3 (64, 16, 3, 3)
fire4/squeeze1x1 (32, 128, 1, 1)
fire4/expand1x1 (128, 32, 1, 1)
fire4/expand3x3 (128, 32, 3, 3)
fire5/squeeze1x1 (32, 256, 1, 1)
fire5/expand1x1 (128, 32, 1, 1)
fire5/expand3x3 (128, 32, 3, 3)
fire6/squeeze1x1 (48, 256, 1, 1)
fire6/expand1x1 (192, 48, 1, 1)
fire6/expand3x3 (192, 48, 3, 3)
fire7/squeeze1x1 (48, 384, 1, 1)
fire7/expand1x1 (192, 48, 1, 1)
fire7/expand3x3 (192, 48, 3, 3)
fire8/squeeze1x1 (64, 384, 1, 1)
fire8/expand1x1 (256, 64, 1, 1)
fire8/expand3x3 (256, 64, 3, 3)
fire9/squeeze1x1 (64, 512, 1, 1)
fire9/expand1x1 (256, 64, 1, 1)
fire9/expand3x3 (256, 64, 3, 3)
conv10_car (2, 512, 1, 1)




Use this instead (with the named "weights" parameter):
W1202 09:04:30.459375 11054 _caffe.cpp:142] 
Net('deploy.prototxt', 1, weights='model/train_iter_70000.caffemodel')

上面的这个问题就是将Python调用Net函数里面的参数里面调整一下

(array([ 585, 1173, 3021, 3290]),) 这几个值没检测出来


第3次  0.6 64 ：(array([ 585, 1173, 3290]),)  只压缩expand3x3 ，2.8M压缩完有1.1M

当变成0.8 16时，有明显的下降了 （0.989）

全部权重压缩 0.3 64时，也是比较好的，（0.999） 2.8M到758KB

当expand3*3压缩0.6，其它压缩0.3的时候，也没多大变化，也是0.999，压缩体积也没变


32： accuracy is :  0.997749015194   accuracy is :  0.7875
16：accuracy is :  0.992965672482    accuracy is :  0.87875
8： accuracy is :  0.96933033202	accuracy is :  0.82375
4： accuracy is :  0.504783342712   0
2： accuracy is :  0.504783342712    0













